// Copyright 2023 Scape Agency BV

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


@use 'sass:math';


// ============================================================================
// Base | Unit
// ============================================================================


// @function strip-unit($value) {
//     @if type-of($value) == 'number' and not unitless($value) {
//         @return math.div($value, 1#{unit($value)});
//     }
//     @return $value;
// }

@function strip-unit($value) {
    @return math.div($value, $value * 0 + 1);
}


@function calculate-responsive-size($min-size, $max-size, $min-vw, $max-vw) {
    @return calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
  }


// Fluid Typography Mixin
// ============================================================================
// Mixin: fluid_type
// Creates fluid typography rules to scale font sizes responsively between a minimum and maximum viewport width.
// Parameters:
// $min-vw - Minimum viewport width
// $max-vw - Maximum viewport width
// $min-font-size - Minimum font size
// $max-font-size - Maximum font size

@mixin fluid_type($min-vw, $max-vw, $min-font-size, $max-font-size) {

    // Ensure the units are consistent
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);
  
    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;

            // Apply fluid font-size between the min and max viewport widths
            @media screen and (min-width: $min-vw) {
                font-size: calc(
                    #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
                );
            }

            // Set to max font-size for viewports wider than the max viewport width
            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }

    @else {
      @warn "Inconsistent units provided for fluid typography.";
    }

}

// Usage Example:
// body {
//     @include fluid_type(320px, 1200px, 1rem, 2rem);
// }

html {
    @include fluid_type($media_min, $media_max, $font_min, $font_max);
}

