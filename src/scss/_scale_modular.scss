// Copyright 2020 Scape Agency BV

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.




// Modular Scale Ratios Map
// This map contains common ratios used in modular scale calculations.
$modular-scale-ratios: (
    "minor-second":     1.067,
    "major-second":     1.125,
    "minor-third":      1.2,
    "major-third":      1.25,
    "perfect-fourth":   1.333,
    "augmented-fourth": 1.414,
    "perfect-fifth":     1.5,
    "minor-sixth":      1.6,
    "golden-ratio":     1.618,
    "major-sixth":      1.667,
    "minor-seventh":    1.778,
    "major-seventh":    1.875,
    "octave":           2,
    "major-tenth":      2.5,
    "major-eleventh":   2.667,
    "major-twelfth":    3,
    "double-octave":    4
) !default;



// Modular Scale Function
/// Calculates sizes (like font-size, spacing) based on a modular scale.
/// This is useful for maintaining harmonious proportions in typography and layout.
/// @param $step - The step on the scale, can be positive or negative.
/// @param $base - The base value to scale from, defaults to 1em (typographic base size).
/// @param $ratio - The ratio to use for scaling, defaults to the Golden Ratio.
/// @return - The calculated value based on the modular scale.
@function modular-scale($step, $base: 1em, $ratio: 1.618) {
  // Validate inputs
  @if type-of($step) != 'number' {
      @error "Step must be a number.";
  }

  @if type-of($base) != 'number' and not unitless($base) {
      @error "Base must be a number with or without units.";
  }

  @if type-of($ratio) != 'number' or $ratio <= 0 {
      @error "Ratio must be a positive number.";
  }

  // Calculate the modular scale value
  @return $base * pow($ratio, $step);
}

$ratio: map-get($modular-scale-ratios, $ratio-name);


// body {
//   font-size: modular-scale(0); // Equal to the base size, 1em
// }

// h1 {
//   font-size: modular-scale(2); // Larger than the base size
// }

// .small-text {
//   font-size: modular-scale(-1); // Smaller than the base size
// }
