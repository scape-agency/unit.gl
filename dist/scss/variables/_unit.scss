// Copyright 2024 Scape Agency BV

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



// ============================================================================
// Base | Unit
// ============================================================================

@use "sass:math";
@use "view" as *;
@use "../functions" as *;


// Kyū Measurement System for Responsive Typography
// Defines a base size and provides a mixin for fluid typography.


// Kyū base size definition (A Kyū is 1/16th of a Rem).
// 1rem equals the font size of the html element, which for most browsers has
// a default value of 16px.
$q: 0.0625rem !default;  // 1px, or 0.25mm


// Function to calculate multiples of 'q'
@function q($multiplier) {
    @return calc($q * $multiplier);
}

// Mixin to apply multiples of 'q'
@mixin q($multiplier, $property) {
    #{$property}: q($multiplier);
}


// Root custom properties for Kyū sizes
:root {
    --q: $q;
}


// Minimum and maximum Kyū sizes
$q_min: 0.75px !default;
$q_max: 1.50px !default;

// Minimum and maximum Kyū sizes
$font_min: calc((1rem / $q) * $q_min) !default;
$font_max: calc((1rem / $q) * $q_max) !default;

// @mixin fluid_type($min-vw, $max-vw, $min-font-size, $max-font-size) {
//     // Assign font-size for the starting viewport width
//     font-size: $min-font-size;

//     // Apply fluid scaling between the minimum and maximum viewport widths
//     @media screen and (min-width: $min-vw) {
//         font-size: calc(#{$min-font-size} + #{unitless($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{unitless($max-vw - $min-vw)}));
//     }

//     // Fix the font-size at the maximum size beyond the maximum viewport width
//     @media screen and (min-width: $max-vw) {
//         font-size: $max-font-size;
//     }
// }

@mixin fluid_type($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;
            @media screen and (min-width: $min-vw) {
                font-size: calc(#{$min-font-size} + #{unit_strip($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{unit_strip($max-vw - $min-vw)}));
            }
            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}



html {
    @include fluid_type($media_xs, $media_sl, $font_min, $font_max);
}




